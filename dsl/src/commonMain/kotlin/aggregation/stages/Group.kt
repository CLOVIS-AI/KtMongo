/*
 * Copyright (c) 2025, OpenSavvy and contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package opensavvy.ktmongo.dsl.aggregation.stages

import opensavvy.ktmongo.bson.BsonContext
import opensavvy.ktmongo.bson.BsonFieldWriter
import opensavvy.ktmongo.dsl.DangerousMongoApi
import opensavvy.ktmongo.dsl.KtMongoDsl
import opensavvy.ktmongo.dsl.LowLevelApi
import opensavvy.ktmongo.dsl.aggregation.AccumulationOperators
import opensavvy.ktmongo.dsl.aggregation.AccumulationOperatorsImpl
import opensavvy.ktmongo.dsl.aggregation.Pipeline
import opensavvy.ktmongo.dsl.tree.AbstractBsonNode

/**
 * Pipeline implementing the `$group` stage.
 */
@KtMongoDsl
interface HasGroup<Document : Any> : Pipeline<Document> {

	/**
	 * Combines multiple documents into a single document.
	 *
	 * The resulting documents contain fields generated by accumulating all input documents.
	 * To learn more about accumulation operators, see [AccumulationOperators].
	 *
	 * ### Example
	 *
	 * If we have users with an account balance, we can find out the total account balance of all users.
	 *
	 * ```kotlin
	 * class User(
	 *     val name: String,
	 *     val balance: Int,
	 * )
	 *
	 * class Result(
	 *     val totalBalance: Int,
	 * )
	 *
	 * users.aggregate()
	 *     .group {
	 *         Result::totalBalance sum of(User::balance)
	 *     }
	 * ```
	 *
	 * To see the list of available accumulation operators, see [AccumulationOperators].
	 *
	 * ### Performance
	 *
	 * `$group` is a blocking stage, which causes the pipeline to wait for all input data to be retrieved
	 * for the blocking stage before processing the data. A blocking stage may reduce performance
	 * because it reduces parallel processing for a pipeline with multiple stages.
	 * A blocking stage may also use substantial amounts of memory for large data sets.
	 *
	 * ### External resources
	 *
	 * - [Official documentation](https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/)
	 */
	@OptIn(DangerousMongoApi::class, LowLevelApi::class)
	@KtMongoDsl
	fun <Out : Any> group(
		block: AccumulationOperators<Document, Out>.() -> Unit,
	): Pipeline<Out> =
		withStage(GroupStage(AccumulationOperatorsImpl<Document, Out>(context).apply(block), context))
			.reinterpret()

}

private class GroupStage(
	val operators: AccumulationOperators<*, *>,
	context: BsonContext,
) : AbstractBsonNode(context) {

	@LowLevelApi
	override fun write(writer: BsonFieldWriter) = with(writer) {
		writeDocument("\$group") {
			writeNull("_id")
			operators.writeTo(this)
		}
	}
}
